jquery最佳实践 http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html
提高jquery性能的诀窍

1.使用最新版本的jQuery
三条最常见的jQuery选择语句：
$('.elem')         
$('.elem',context)
context.find('.elem') 
运行次数-》-》-
新版本的jQuery表现好于老版本

2.用对选择器（最快选择器：id选择器和元素标签选择器）
1.下面的语句性能最佳：
$('#id')  $('form')  $('input')

2.较慢的选择器：class选择器
取决于不同的游览器

3.最慢的选择器：伪类选择器和属性选择器
$(':hidden')           //找出网页中的所有的隐藏元素，就用到伪类选择器
$('[attribute=value]') //属性选择器

3.理解子元素和父元素的关系
下面六个选择器，都是从父元素中选择子元素。
$('.child',$parent)
$parent.find('.child')    //这条是最快的语句。.find()方法会调用游览器的原生方法
$parent.children('.child') 
$('#parent>.child')
$('#parent .child')
$('.child',$('#parent'))

4.不要过度使用jQuery
document.getElementById("foo")要比$("#foo")快10多倍。
this.id的速度比$(this).attr('id')快了20多倍。

5.做好缓存（使用选择器的次数应该越少越好，尽可能缓存选中的结果）
槽糕的写法：
jQuery('#top').find('p.classA');
jQuery('#top').find('p.classB');

更好的写法：
var cached=JQuery('#top');
cached.find('p.classA');
cached.find('p.classB');
缓存比不缓存，快了2-3倍。


6.使用链式写法 （一大特点）
$('div').find('h3').eq(2).html('Hello');
链式写法比非链式写法，大约快了25%;

7.事件的委托处理
javascript的事件模型，采用'冒泡'模式。
子元素的事件会逐级向上‘冒泡’，成为父元素的事件。

在一个表格（table）元素，里面有100个元素（td元素），
现在要求每个格子绑定一个事件（click），请问是否需要将下面的命令执行100次？
$("td").on("click", function(){
　$(this).toggleClass("click");
});

回答是不需要，只需要在父元素绑定1次即可。
从而大大提高性能，这叫事件的‘委托处理’，
也就是子元素‘委托’父元素处理：
$(document).on('click','td',function(){
  $(this).toggleClass('click');
});

取消事件的绑定，就使用off()方法。
$(document).off('click','td');


8.少改动DOM结构
(1)改动DOM结构开销很大，因此不要频繁使用
.append(),.insertBefore(),.insetAfter()这样的方法
如果要插入多个元素，就先它们合并，然后再一次性插入。
合并插入，快了将近10倍。

(2)如果要对DOM元素进行大量处理。
应该先用.detach()方法。

(3)var elem=$('#elem');
   elem.data(key,value);

而要写成：
var elem=$('#elem');
$.data(elem[0],key,value);

(4)插入html代码的时候，
游览器原生的innterHTML()方法比jQuery对象的html()更快。

9.正确处理循环
javascript原生循环方法for和while，
比jQuery的.each()方法快。

10.尽量少生成jQuery对象
jQuery对象是一个庞大的对象。
尽量少生成jQuery对象。
var  $text=$('#text');
var $ts=$text.text();

var $text=$('#text');
var $ts=$.text($text);

11.选择作用域立链最短的方法
第一种：
var a = 0;
function x(){
　a += 1;
}

第二种：
function y(){
　var a = 0;
　a += 1;
}
第二段读取变量a的时候，
不用前往上一层作用域，所以要比第一段代码快五六倍。


在调用对象方法的时候，closure模式要比prototype模式更快。
prototype模式：
var X=function(name){this.name=name;}
X.prototype.get_name=function(){return this.name;};

closure模式：
var Y=function(name){
   var y={name:name};
   return{'get_name':function(){return y.name;}};
};
同样get_name()方法，closure模式更快。


12.使用Pub/Sub模式管理事件
不要写成：
function doSomething{
  doSomethingElse();
  doOneMoreThing();
}

而改用事件触发：
function doSomething{
   $.trigger('DO_SOMETHING_DONE');
}

$(document).on('DO_SOMETHING_DONE',function(){
  doSomethingElse();
});


还可以考虑使用deferred对象。
function doSomething(){
   var dfd=new $.Deferred();
   //Do something async,then...
   //dfd.resolve();
   
   return dfd.promise();
}

function doSomethingElse(){
   $.when(doSomething()).then(//The next thing);
}





































































































































