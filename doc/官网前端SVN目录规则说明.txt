# 前端制作组SVN目录规范 #

[目录树形结果示意图](http://tu.mindpin.com/mindmaps/45685/)


根目录说明：
----------

- css:              通用css目录，包括可复用模块样式
    - module        非业务相关的通用样式 reset.css等
- libs:             工具类库目录，主要是通用功能的组件库， 与业务有关的组件请使用 `mbb-` 前缀；
- page:             具体业务线上的代码，不同以不同项目，频道，栏目等来区分；
- page-activity:    活动文件使用目录。
- online:           线上静态文件目录的同步目录，所有静态资源都要发布到这里，本地apache可以映射到这里做本地调试；
- docs:             规范文档目录。
- tools:            一些开发打包工具。
- vm:               通知定义外部svn路径，把java开发的个各项目中的vm模版目录统一导入到这个目录中。


单项目目录说明：
--------------

每个项目目录按SVN标准三目录：主干，标签，分支来创建。除trunk外**如无必要，无需创建**，对于trunk下在文件及目录也需按此原则进行，下面为示例目录，不需要所有项目都建全这些目录及文件，但src,及它下面的build.xml为必须创建的文件。

- trunk:               主干目录
    - src:             源文件目录（source），所有需要开发后发布的文件都在这里；
        - build.xml:   ant打包文件；
    - dist:            打包后的生成文件，即为发布文件；
    - lib:             需要调用的类库，比如jquery，正式发布时无需上线（因为线上已经有了）；
    - example:         示例文件，对于通用组件可以增加此目录来示范组件的用法；
    - test:            单点测试目录；
    - dome:            模版文件的开发目录，初始开发的模版文件可以放这里；
    - readme.md：      记录项目开发思路，对后续参与人员有很大帮助；
                       记录项目的bug修复情况，对于一些组件，可以把一下项目还需增加的特性记录在这里（todo）；
- tags:                项目的一些打了标签的版本；
    - 1.1.2545:          备份里程碑，比如发布上线了一个版本（是否可以ant自动做？）；
    - 1.1.2548
- branches:            分支开发的版本
    - bug_001:         为修改bug所打的分支，修改完成后可删除掉；


SVN最佳实践：
------------

虽然静态文件的修改多人合作的机会不多，但静态文件修改频繁，隐性bug爆发需紧急修复的情况比较多见。需要SVN来隔离多线开发的干扰。

- trunk尽量保持稳定，与线上发布版本一致；
- 按需建分支，对于要长时间开发的功能，长时间去修复的bug必须创建分支来开发；
- 对于因修复bug创建分支，在修复完成并发布后，及时合并入主干。合并后可以删除掉；
- 对于提交要保持单一目的，不要混合多个修改，每次提交要写明注释；